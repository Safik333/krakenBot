import {GoogleSpreadsheet} from 'google-spreadsheet';
import {JWT} from 'google-auth-library';
import TelegramBot from 'node-telegram-bot-api';
import {months, tableTitles} from './constants.mjs';
import config from 'config';

const bot = new TelegramBot(config.get('telegram.token'), {polling: false});

// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
const serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: config.get('google.email'),
    key: config.get('google.key'),
    scopes: [
        'https://www.googleapis.com/auth/spreadsheets',
    ],
});

const doc = new GoogleSpreadsheet(config.get('google.urlSheetId'), serviceAccountAuth);

//Название таблицы
await doc.loadInfo(); // loads document properties and worksheets
//Название всех вкладок
const sheets = doc.sheetsByIndex;

//Привести др к дате
const getUserBirthday = (birthday) => {
    const year = new Date().getFullYear();
    const [day, month] = birthday.split(' ');
    const shortMonthName = month.slice(0, 3);
    const birthdayMonth = months[shortMonthName];

    return (new Date(year, birthdayMonth, Number(day), 10));
}

//Достать информацию с нужных столбцов с каждой вкладки таблицы
const getUsersInfo = async () => {
    const usersInfo = []
    for (let sheet of sheets) {
        const rows = await sheet.getRows();
        rows.map(el => {
            const userId = el.get('');
            if (userId !== '') {
                //Пришлось сделать так, тк разные наименования столбцов
                const userName = el.get(sheet.headerValues[tableTitles.nameTitle.id]);
                const birthday = el.get(tableTitles.birthdayTitle.title);
                const contact = el.get(tableTitles.contactTitle.title);
                const userBirthday = getUserBirthday(birthday);
                usersInfo.push({id: contact, userName, birthday: userBirthday});
            }
        });
    }

    return usersInfo;
}

//Сверка даты др с текущей датой
const isBirthdayToday = (birthday) => {
    const today = new Date();
    return today.getDate() === birthday.getDate() && today.getMonth() === birthday.getMonth();
}

//Найти именнинника(ов)
const getBirthdayPeople = async (users) => {
    let birthdayPeople = [];
    for (let i = 0; i < users.length; i++) {
        const isBirthdayPerson = isBirthdayToday(users[i].birthday);
        if (isBirthdayPerson) birthdayPeople.push(users[i]);
    }
    return birthdayPeople;
}

//Проверка на уникальность, тк человек мб занесен на несколько вкладок
const getUniqueUsersByName = async (users) => {
    if (users.length > 1) {
        let uniqueUsers = {};
        users.forEach(user => {
            if (!uniqueUsers[user.userName] && !uniqueUsers[user.id]) {
                uniqueUsers[user.userName] = user;
            }
        });
        return Object.values(uniqueUsers);
    }

    return users;
}

//Найти людей у которых недавно было др
const getUsersAfterBirthday = (users) => {
    const year = 365;
    const today = new Date();
    const usersAfterBirthday = [];
    for(let i = 0; i <= year; i++) {
        today.setDate(today.getDate() - 1);
        for(let i = 0; i < users.length; i++) {
            const {birthday} = users[i];
            const lastDay = today.getDate();
            const lastMonth = today.getMonth();
            const day = birthday.getDate();
            const month = birthday.getMonth();
            if(lastDay === day && lastMonth === month) {
                usersAfterBirthday.push(users[i]);
            }
        }
        if(usersAfterBirthday.length > 0) {
            break;
        }
    }

    return usersAfterBirthday;
}

const createMessage = (users) => {
    let names = '';
    if (users.length === 1) {
        return `Пора собирать золото! \n${users[0].userName}(${users[0].id}) сегодня постарел(а)!`;
    } else {
        for(let {id, userName} of users) {
            names = names === '' ? `${userName}(${id})` : `${names}, ${userName}(${id})`;
        }
        return `Пора собирать золото! \n${names} сегодня постарели!`;
    }
}

const createMessageForUsersAfterBirthday = (users) => {
    let names = '';
    if (users.length === 1) {
        return `${users[0].userName} озолотился(ась), пора добавить его в чат для сбора золота!`;
    } else {
        for(let {userName} of users) {
            names = names === '' ? `${userName}` : `${names}, ${userName}`;
        }
        return `${names} озолотились, пора добавить их в чат для сбора золота!`;
    }
}

const usersInfo = await getUsersInfo();
const birthdayPeople = await getBirthdayPeople(usersInfo);
const uniqueUsersBirthday = await getUniqueUsersByName(birthdayPeople);

const peopleAfterBirthday = getUsersAfterBirthday(usersInfo);
const uniqueUsersAfterBirthday = await getUniqueUsersByName(peopleAfterBirthday);
const picturesPath = './witcher/witcher.jpg';

const managers = Object.values(config.get('managers'));
if(birthdayPeople.length !== 0) {
    const messageBirthday = createMessage(uniqueUsersBirthday);
    const messageAfterBirthday = createMessageForUsersAfterBirthday(uniqueUsersAfterBirthday);
    const message = `${messageBirthday} \n${messageAfterBirthday}`;

    for (let {id} of managers) {
        bot.sendPhoto(id, `${picturesPath}`,  {caption : message});
    }
}

